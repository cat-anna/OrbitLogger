/*
  * Generated by cppsrc.sh
  * On 2016-01-20 22:48:52,08
  * by Paweu
*/
/*--END OF HEADER BLOCK--*/

#pragma once
#ifndef Sink_H
#define Sink_H

namespace OrbitLogger {

class iLogSinkBase {
public:
	iLogSinkBase();
 	virtual ~iLogSinkBase();

	virtual void Line(const LogLine *line) = 0;
};

//----------------------------------------------------------------------------------

template<class OutputPolicy, class FilteringPolicy, class FormatPolicy>
struct LogSink : public iLogSinkBase, public OutputPolicy, public FilteringPolicy, public FormatPolicy {
	virtual void Line(const LogLine *line) override {
		if (!Filter(line))
			return;
		char buffer[Configuration::StringFormatBuffer];
		Format(line, buffer, sizeof(buffer) - 1);
		Write(line, buffer);
	}
};

//----------------------------------------------------------------------------------

struct LogNoFilteringPolicy {
	bool Filter(const LogLine *line) const { return true; }
};

struct LogNoDebugFilteringPolicy {
	bool Filter(const LogLine *line) const {
		return line->m_SourceInfo->m_Channel != LogChannels::Debug;
	}
};

//---------------------------------------------------------------------------------

struct LogFileOutputPolicy {
	~LogFileOutputPolicy();
	void Open(const char*file, bool append = true);
	void Write(const LogLine *line, const char *c) {
		m_File << c << std::flush;
	}
protected:
	std::ofstream m_File;
};

//---------------------------------------------------------------------------------

struct LogStandardFormatter {
	LogStandardFormatter();
	void Format(const LogLine *line, char* buffer, size_t buffer_size);
protected:
#ifdef ORBITLOGGER_EXTENDED_LOG_COUNTERS
	unsigned NextLine() { return ++m_Line; }
	unsigned NextType(LogChannel t) { return ++m_Type[(unsigned)t]; }
	unsigned m_Line;
	unsigned m_Type[LogChannels::MaxLogChannels];
#endif
};

//---------------------------------------------------------------------------------
//---------------------------------------------------------------------------------

using StdFileLoggerSink = LogSink <LogFileOutputPolicy, LogStandardFormatter, LogNoFilteringPolicy >;
using StdNoDebugFileLoggerSink = LogSink <LogFileOutputPolicy, LogStandardFormatter, LogNoDebugFilteringPolicy >;

} //namespace OrbitLogger 

#endif
